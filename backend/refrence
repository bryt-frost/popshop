Login Endpoint:

URL: /auth/jwt/create/
Method: POST
Description: This endpoint is used to log in a user and obtain an access token. The client sends the user's credentials (usually username and password) in the request, and if they are valid, the server responds with a JWT access token.
Refresh Token Endpoint:

URL: /auth/jwt/refresh/
Method: POST
Description: This endpoint is used to refresh an expired or expiring access token. The client sends a refresh token in the request, and if it's valid, the server responds with a new access token.
Verify Token Endpoint:

URL: /auth/jwt/verify/
Method: POST
Description: This endpoint is used to verify the validity of an access token. The client sends the access token in the request, and the server responds with whether the token is valid or not.
User Detail Endpoint:

URL: /auth/users/me/
Method: GET
Description: This endpoint allows authenticated users to retrieve their user details. The request must include a valid access token.
User Logout Endpoint:

URL: /auth/jwt/invalidate/
Method: POST
Description: This endpoint is used to log out a user by invalidating their access token. The client sends the access token to be invalidated in the request.
User Registration Endpoint:

URL: /auth/users/
Method: POST
Description: This endpoint is used for user registration. It allows users to create new accounts by providing their registration details.





===================================================


Certainly! If you prefer using normal views instead of viewsets, you can modify the Django views accordingly. Here's an example:

1. Django Models:

python
Copy code
# models.py
from django.db import models
from django.contrib.auth.models import User

class Product(models.Model):
    name = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=10, decimal_places=2)

class Cart(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    products = models.ManyToManyField(Product, through='CartItem')

class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
2. Serializers:

python
Copy code
# serializers.py
from rest_framework import serializers
from .models import Product, CartItem

class ProductSerializer(serializers.ModelSerializer):
    class Meta:
        model = Product
        fields = '__all__'

class CartItemSerializer(serializers.ModelSerializer):
    product = ProductSerializer()

    class Meta:
        model = CartItem
        fields = ['product', 'quantity']
3. API Views and URLs:

python
Copy code
# views.py
from django.shortcuts import get_object_or_404
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from .models import Product, CartItem
from .serializers import ProductSerializer, CartItemSerializer

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def cart_items(request):
    cart = get_object_or_404(Cart, user=request.user)
    cart_items = CartItem.objects.filter(cart=cart)
    serializer = CartItemSerializer(cart_items, many=True)
    return Response(serializer.data)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def add_to_cart(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    cart, created = Cart.objects.get_or_create(user=request.user)
    cart_item, created = CartItem.objects.get_or_create(cart=cart, product=product)
    cart_item.quantity += 1
    cart_item.save()
    serializer = CartItemSerializer(cart_item)
    return Response(serializer.data)



=========================================